generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleEnum {
  ADMIN
  TEACHER
  STUDENT
}

enum MaterialType {
  PDF
  VIDEO
  LINK
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      RoleEnum
  bio       String?

  // Relationships
  // Teacher roles
  teachingClasses Class[] @relation("ClassTeachers", references: [id])
  uploadedMaterials Material[] @relation("UploadedMaterials")
  createdAssignments Assignment[] @relation("CreatedAssignments")

  // Student roles
  enrollments  Enrollment[]
  submissions  Submission[]

  // Messages
  messagesSent     Message[] @relation("SentMessages")
  messagesReceived Message[] @relation("ReceivedMessages")

  createdAt DateTime @default(now())
}

model Course {
  id          String  @id @default(uuid())
  title       String
  description String
  level       String

  classes     Class[]
}

model Class {
  id        String   @id @default(uuid())
  name      String

  // Relationships
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String

  teachers  User[]   @relation("ClassTeachers")

  enrollments Enrollment[]
  schedules   ScheduleEntry[]
  materials   Material[]
  assignments Assignment[]
  attendances Attendance[]
}

model Enrollment {
  id        String @id @default(uuid())

  student   User   @relation(fields: [studentId], references: [id])
  studentId String

  class     Class  @relation(fields: [classId], references: [id])
  classId   String

  @@unique([studentId, classId]) // prevent duplicates
}

model ScheduleEntry {
  id         String   @id @default(uuid())
  dayOfWeek  String   // E.g., "Monday", "Tuesday"
  startTime  String   // Could be changed to DateTime if preferred
  endTime    String

  class      Class    @relation(fields: [classId], references: [id])
  classId    String
}

model Material {
  id        String        @id @default(uuid())
  title     String
  fileUrl   String
  type      MaterialType

  uploadedBy   User       @relation("UploadedMaterials", fields: [uploadedById], references: [id])
  uploadedById String

  class     Class         @relation(fields: [classId], references: [id])
  classId   String
}

model Assignment {
  id          String   @id @default(uuid())
  title       String
  description String
  dueDate     DateTime

  createdBy   User     @relation("CreatedAssignments", fields: [createdById], references: [id])
  createdById String

  class       Class    @relation(fields: [classId], references: [id])
  classId     String

  submissions Submission[]
}

model Submission {
  id           String   @id @default(uuid())
  content      String   // Text or file URL
  submittedAt  DateTime @default(now())
  feedback     String?
  grade        String?

  assignment   Assignment @relation(fields: [assignmentId], references: [id])
  assignmentId String

  submittedBy  User       @relation(fields: [studentId], references: [id])
  studentId    String
}

model Attendance {
  id        String   @id @default(uuid())
  date      DateTime
  status    String   // "Present", "Absent", "Late"

  student   User     @relation(fields: [studentId], references: [id])
  studentId String

  class     Class    @relation(fields: [classId], references: [id])
  classId   String
}

model Message {
  id         String   @id @default(uuid())
  content    String
  sentAt     DateTime @default(now())

  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  senderId   String

  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId String
}
